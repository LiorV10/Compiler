#define _ACTIONS

AbstractSyntaxTreeNode *DefaultSemanticAction(void *scopeStack, Stack *semanticStack, ErrorHandler *errors);
void AssignActions(Grammar *gramar);

void GenerateArithmeticExpression(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateAddition(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateSubtraction(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateIntegerLiteral(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateFloatLiteral(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateStringLiteral(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateAssignment(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateMult(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateDivision(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateDeclaration(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateSymbol(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateAdditionAssignment(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateReturn(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateIf(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateFor(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateWhile(void *generator, AbstractSyntaxTreeNode *astNode);
void GenerateStatements(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateExpression(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateCall(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateCallWithoutParams(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateReference(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateDereference(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateLT(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateGT(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateGE(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateLE(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateEEQ(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateNEQ(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateLSHIFT(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateRSHIFT(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateMod(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateAnd(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateLogicalAnd(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateXor(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateNeg(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateLogicalNot(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateStructAccess(void *generator, AbstractSyntaxTreeNode *astRoot);
void GenerateBlock(void *generator, AbstractSyntaxTreeNode *astRoot);

void AnalyzeAddition(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);
void AnalyzeSubtraction(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);
void AnalyzeStructAccess(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);
void AnalyzeArithmeticExpression(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);
void AnalyzeDeclaration(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);
void AnalyzeCall(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);
void AnalyzeMultDiv(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);
void AnalyzeMod(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);
void AnalyzeNeg(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);
void AnalyzeReference(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);
void AnalyzeDereference(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);
void AnalyzeAssignment(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);
void AnalyzeRelational(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);
void AnalyzeBitwise(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);
void AnalyzeLogical(AbstractSyntaxTreeNode **astNode, ErrorHandler *errors);